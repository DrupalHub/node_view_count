<?php

/**
 * @file
 * Code for entity view count.
 */

require_once 'entity_view_count.field.inc';

/**
 * Implements hook_menu().
 */
function entity_view_count_menu() {
  $items = array();

  $items['admin/config/system/entity_view_count'] = array(
    'title' => 'Entity view count settings',
    'description' => 'Settings for the Entity view count module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_view_count_settings'),
    'access arguments' => array('administer entity view count entries'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function entity_view_count_permission() {
  return array(
    'administer entity view count entries' => array(
      'title' => t('Administer entity view count entries'),
      'description' => t('Grant permission to manage entity view count entries'),
    ),
    'view entity view count field' => array(
      'title' => t('View entity view count field'),
      'description' => t('Allow to the user watch the entity view count values.'),
    ),
    'increase entity view count' => array(
      'title' => t('Increase entity view count'),
      'description' => t('Allow to the user to increase the entity view count values.'),
    ),
  );
}

/**
 * Implements hook_view_api().
 */
function entity_view_count_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'entity_view_count') . '/includes/views',
  );
}

/**
 * Implement hook_ctools_plugin_directory().
 */
function entity_view_count_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implement hook_entity_info().
 */
function entity_view_count_entity_info() {
  $info = array();

  $info['entity_view_count'] = array(
    'label' => t('Entity view count'),
    'base table' => 'entity_view_count',
    'entity class' => 'EntityViewCount',
    'controller class' => 'EntityAPIController',
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'type',
    ),
    'fieldable' => TRUE,
    'metadata controller class' => 'EntityDefaultMetadataController',
    'views controller class' => 'EntityViewCountViewController',
  );

  return $info;
}

/**
 * Create entity view count.
 *
 * @param array $params
 *  Array of with default arrays.
 *
 * @return EntityViewCount
 *  Return non-saved object of entity view count.
 */
function entity_view_count_create(array $params) {
  global $user;

  if (isset($params['entity']) ) {
    $wrapper = entity_metadata_wrapper($params['entity_type'], $params['entity']);
    $params['entity_id'] = $wrapper->getIdentifier();

    // Remove the entity key.
    unset($params['entity']);
  }

  $params += array(
    'created' => REQUEST_TIME,
    'uid' => $user->uid,
    'type' => 'entity_view_count_base',
  );

  return entity_create('entity_view_count', $params);
}

/**
 * Load entity view count.
 *
 * @param Integer $id
 *  The entry ID.
 *
 * @return EntityViewCount
 *  The object from the DB.
 */
function entity_view_count_load($id) {
  return entity_load_single('entity_view_count', $id);
}

/**
 * Load multiple object from the db.
 *
 * @param array $ids
 *  List of entity IDs.
 *
 * @return EntityViewCount[]
 */
function entity_view_count_load_multiple(array $ids) {
  return entity_load('entity_view_count', $ids);
}

/**
 * Delete multiple entity view count entries from the DB.
 *
 * @param array $ids
 *  List of ids.
 */
function entity_view_count_delete_multiple($ids) {
  entity_delete_multiple('entity_view_count', $ids);
}

/**
 * Implements hook_entity_view().
 */
function entity_view_count_entity_view($entity, $type, $view_mode, $langcode) {
  $info = variable_get('entity_view_count_track_' . $type);

  if (empty($info[$view_mode])) {
    return;
  }

  if (!user_access('increase entity view count')) {
    return;
  }

  $params = array(
    'entity_type' => $type,
    'entity' => $entity,
    'view_mode' => $view_mode,
    'entity_owner' => !empty($entity->uid) ? $entity->uid : 0,
  );

  entity_view_count_create($params)->save();
}

/**
 * Form callback; Set the settings for the module.
 */
function entity_view_count_settings($form, $form_state) {
  $form['track'] = array(
    '#type' => 'vertical_tabs',
  );

  $entities = entity_get_info();

  foreach ($entities as $name => $entity) {

    if (empty($entity['view modes'])) {
      continue;
    }

    $form['track'][$name] = array(
      '#type' => 'fieldset',
      '#title' => $entity['label'],
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'visibility',
      '#weight' => 0,
    );

    $selected = variable_get('entity_view_count_track_' . $name, array());

    $default_views = array();

    foreach ($selected as $view_mode_name => $select) {

      if (!$select) {
        continue;
      }

      $default_views[] = $view_mode_name;
    }

    $form['track'][$name]['entity_view_count_track_' . $name] = array(
      '#type' => 'checkboxes',
      '#title' => t('Select which view modes will be counted as viewed'),
      '#default_value' => $default_views,
    );

    foreach ($entity['view modes'] as $view_mode_name => $info) {
      $form['track'][$name]['entity_view_count_track_' . $name]['#options'][$view_mode_name] = $info['label'];
    }
  }

  return system_settings_form($form);
}

/**
 * Get the number of times the entity was viewed.
 *
 * @param String $entity_type
 *   The entity type.
 * @param Integer $entity_id
 *   The entity ID.
 *
 * @return integer
 *   The number of times the entity was viewed.
 */
function entity_view_count_get_entity_count($entity_type, $entity_id) {
  $query = new EntityFieldQuery();
  return $query
    ->entityCondition('entity_type', 'entity_view_count')
    ->propertyCondition('entity_type', $entity_type)
    ->propertyCondition('entity_id', $entity_id)
    ->count()
    ->execute();
}

/**
 * Get the number of times the user view entities.
 *
 * @param integer $uid
 *   The user ID.
 *
 * @return Integer
 *   The number of times the user viewed entities.
 */
function entity_view_count_user_viewing_entities_count($uid) {
  $query = new EntityFieldQuery();
  return $query
    ->entityCondition('entity_type', 'entity_view_count')
    ->propertyCondition('uid', $uid)
    ->count()
    ->execute();
}

/**
 * Count how much the users owned entities were viewed.
 *
 * @param integer $uid
 *   The user ID.
 *
 * @return integer
 *   The amount of times the user owned entities were viewed.
 */
function entity_view_count_user_owned_entity_count($uid) {
  $query = new EntityFieldQuery();
  return $query
    ->entityCondition('entity_type', 'entity_view_count')
    ->propertyCondition('entity_owner', $uid)
    ->count()
    ->execute();
}

/**
 * Implements hook_entity_delete().
 *
 * Delete any entries relate to the delete entity.
 */
function entity_view_count_entity_delete($entity, $type) {
  $wrapper = entity_metadata_wrapper($type, $entity);
  $query = new EntityFieldQuery();
  $results = $query
    ->entityCondition('entity_type', 'entity_view_count')
    ->propertyCondition('entity_type', $type)
    ->propertyCondition('entity_id', $wrapper->getIdentifier())
    ->execute();

  if (empty($results['entity_view_count'])) {
    return;
  }

  entity_view_count_delete_multiple(array_keys($results['entity_view_count']));
}
